{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\WELCOME\\\\Desktop\\\\MusicAPP\\\\src\\\\screens\\\\SearchScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Search from \"../api/SSearch\";\nimport Listing from \"../api/List\";\nimport token from \"../api/token\";\nimport SSearch from \"../api/SSearch\";\nimport search from \"../api/search\";\nvar PAGE = 20;\n\nvar SearchScreen = function (_React$Component) {\n  _inherits(SearchScreen, _React$Component);\n\n  var _super = _createSuper(SearchScreen);\n\n  function SearchScreen() {\n    var _this;\n\n    _classCallCheck(this, SearchScreen);\n\n    _this = _super.call(this);\n    _this.state = {\n      songs: [],\n      offset: 0,\n      query: 'Shpongle',\n      isFetching: false,\n      token: null,\n      isTokenFetching: false\n    };\n    return _this;\n  }\n\n  _createClass(SearchScreen, [{\n    key: \"loadNextPage\",\n    value: function loadNextPage() {\n      var _this$state, songs, offset, query, token, isFetching, newSongs;\n\n      return _regeneratorRuntime.async(function loadNextPage$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = this.state, songs = _this$state.songs, offset = _this$state.offset, query = _this$state.query, token = _this$state.token, isFetching = _this$state.isFetching;\n\n              if (!isFetching) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              this.setState({\n                isFetching: true\n              });\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(search({\n                offset: offset,\n                limit: PAGE,\n                q: query,\n                token: token\n              }));\n\n            case 6:\n              newSongs = _context.sent;\n\n              if (newSongs.length === 0) {\n                console.log('no songs found. there may be an error');\n              }\n\n              this.setState({\n                isFetching: false,\n                songs: [].concat(_toConsumableArray(songs), _toConsumableArray(newSongs)),\n                offset: offset + PAGE\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"refreshToken\",\n    value: function refreshToken() {\n      var newToken;\n      return _regeneratorRuntime.async(function refreshToken$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.setState({\n                isTokenFetching: true\n              });\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(token());\n\n            case 3:\n              newToken = _context2.sent;\n              this.setState({\n                token: newToken,\n                isTokenFetching: false\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.refreshToken());\n\n            case 2:\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(this.loadNextPage());\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"handleSearchChange\",\n    value: function handleSearchChange(text) {\n      var _this2 = this;\n\n      this.setState({\n        query: text,\n        offset: 0,\n        songs: []\n      }, function () {\n        _this2.loadNextPage();\n      });\n      console.log('search text is', text);\n    }\n  }, {\n    key: \"handleEndReached\",\n    value: function handleEndReached() {\n      return _regeneratorRuntime.async(function handleEndReached$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(this.loadNextPage());\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state2 = this.state,\n          songs = _this$state2.songs,\n          query = _this$state2.query,\n          isFetching = _this$state2.isFetching;\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableOpacity, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }, React.createElement(SSearch, {\n        onChange: function onChange(text) {\n          return _this3.handleSearchChange(text);\n        },\n        text: query,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }), isFetching && songs.length === 0 ? React.createElement(ActivityIndicator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }\n      }) : React.createElement(Listing, {\n        items: songs,\n        onEndReached: function onEndReached() {\n          return _this3.handleEndReached();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return SearchScreen;\n}(React.Component);\n\nexport { SearchScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'stretch',\n    justifyContent: 'flex-start',\n    margin: 10,\n    marginTop: 50\n  }\n});","map":{"version":3,"sources":["C:/Users/WELCOME/Desktop/MusicAPP/src/screens/SearchScreen.js"],"names":["React","Search","Listing","token","SSearch","search","PAGE","SearchScreen","state","songs","offset","query","isFetching","isTokenFetching","setState","limit","q","newSongs","length","console","log","newToken","refreshToken","loadNextPage","text","styles","container","handleSearchChange","handleEndReached","Component","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","margin","marginTop"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ActivityIndicator,\n  TouchableOpacity\n} from 'react-native';\n\nimport Search from '../api/SSearch';\nimport Listing from '../api/List';\nimport token from '../api/token';\nimport SSearch from '../api/SSearch';\nimport search from '../api/search';\nconst PAGE = 20;\n\nexport default class SearchScreen extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      songs: [],\n      offset: 0,\n      query: 'Shpongle',\n      isFetching: false,\n      token: null,\n      isTokenFetching: false,\n    };\n  }\n\n  async loadNextPage() {\n    const { songs, offset, query, token, isFetching } = this.state;\n\n    if (isFetching) {\n      return;\n    }\n\n    this.setState({ isFetching: true });\n\n    const newSongs = await search({\n      offset: offset,\n      limit: PAGE,\n      q: query,\n      token,\n    });\n\n    if (newSongs.length === 0) {\n      console.log('no songs found. there may be an error');\n    }\n\n    this.setState({\n      isFetching: false,\n      songs: [...songs, ...newSongs],\n      offset: offset + PAGE,\n    });\n  }\n\n  async refreshToken() {\n    this.setState({\n      isTokenFetching: true,\n    });\n\n    const newToken = await token();\n\n    this.setState({\n      token: newToken,\n      isTokenFetching: false,\n    });\n  }\n\n  async componentDidMount() {\n    await this.refreshToken();\n    await this.loadNextPage();\n  }\n\n  handleSearchChange(text) {\n    // reset state\n    this.setState({\n      query: text,\n      offset: 0,\n      songs: [],\n    }, () => {\n      this.loadNextPage();\n    });\n    console.log('search text is', text);\n  }\n\n  async handleEndReached() {\n    await this.loadNextPage();\n  }\n\n  render() {\n    const { songs, query, isFetching } = this.state;\n\n    return (\n      <View style={styles.container}>\n        <TouchableOpacity>\n        <SSearch\n        onChange={text => this.handleSearchChange(text)}\n        text={query}\n        />\n        {\n        (isFetching && songs.length === 0)\n        ? <ActivityIndicator />\n        : <Listing\n        items={songs}\n        onEndReached={() => this.handleEndReached()}\n        />\n        }\n        </TouchableOpacity>\n      </View>\n  );\n}\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'stretch',\n    justifyContent: 'flex-start',\n    margin: 10,\n    marginTop: 50,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}