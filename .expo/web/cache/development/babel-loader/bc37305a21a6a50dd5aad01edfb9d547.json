{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\WELCOME\\\\Desktop\\\\MusicAPP\\\\src\\\\containers\\\\StickyMusicPlayerView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { connect } from \"react-redux\";\nimport FloatMusicDetailsView from \"./FloatMusicDetailsView\";\nimport MusicPlayerAsync from \"../components/MusicPlayerAsync\";\nimport MusicPlayBar from \"../components/MusicPlayBar\";\nimport { updateMusicStatus } from \"../redux/actions\";\nimport * as Font from \"expo-font\";\nvar PureMusicPlayer = new MusicPlayerAsync();\n\nvar StickyMusicPlayerView = function (_Component) {\n  _inherits(StickyMusicPlayerView, _Component);\n\n  var _super = _createSuper(StickyMusicPlayerView);\n\n  function StickyMusicPlayerView() {\n    var _this;\n\n    _classCallCheck(this, StickyMusicPlayerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      showBar: true,\n      pause: true\n    };\n\n    _this.setMusicStatus = function (status) {\n      _this.props.updateMusicStatus(status);\n    };\n\n    _this.setMusicPosition = function (pos) {\n      PureMusicPlayer.setMusicPosAsync(pos);\n    };\n\n    _this.changeView = function () {\n      return _this.setState({\n        showBar: !_this.state.showBar\n      });\n    };\n\n    _this.reloadMusic = function (source) {\n      PureMusicPlayer.reloadAndPlay(source);\n    };\n\n    _this.toggleMusic = function () {\n      console.log(\"Pressed Play\");\n\n      _this.setState({\n        pause: PureMusicPlayer.isPlaying\n      });\n\n      PureMusicPlayer.togglePlay(_this.props.selected_music.audioUrl);\n    };\n\n    return _this;\n  }\n\n  _createClass(StickyMusicPlayerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      PureMusicPlayer.setPlayback(this.setMusicStatus);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.selected_music !== this.props.selected_music) {\n        this.reloadMusic(this.props.selected_music.audioUrl);\n        console.log(\"Music changed\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.showBar ? React.createElement(MusicPlayBar, _extends({}, this.props, {\n        pauseState: this.state.pause,\n        toggleMusic: this.toggleMusic,\n        changeView: this.changeView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      })) : React.createElement(FloatMusicDetailsView, {\n        setPosition: this.setMusicPosition,\n        pauseState: this.state.pause,\n        toggleMusic: this.toggleMusic,\n        changeView: this.changeView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return StickyMusicPlayerView;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    selected_music: state.selected_music\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateMusicStatus: updateMusicStatus\n})(StickyMusicPlayerView);\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["C:/Users/WELCOME/Desktop/MusicAPP/src/containers/StickyMusicPlayerView.js"],"names":["React","Component","connect","FloatMusicDetailsView","MusicPlayerAsync","MusicPlayBar","updateMusicStatus","Font","PureMusicPlayer","StickyMusicPlayerView","state","showBar","pause","setMusicStatus","status","props","setMusicPosition","pos","setMusicPosAsync","changeView","setState","reloadMusic","source","reloadAndPlay","toggleMusic","console","log","isPlaying","togglePlay","selected_music","audioUrl","setPlayback","prevProps","mapStateToProps","styles","StyleSheet","create"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,qBAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,YAAP;AACA,SAASC,iBAAT;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,IAAMC,eAAe,GAAG,IAAIJ,gBAAJ,EAAxB;;IAEMK,qB;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,IADH;AAENC,MAAAA,KAAK,EAAE;AAFD,K;;UAiBRC,c,GAAiB,UAAAC,MAAM,EAAI;AACzB,YAAKC,KAAL,CAAWT,iBAAX,CAA6BQ,MAA7B;AACD,K;;UAEDE,gB,GAAmB,UAAAC,GAAG,EAAI;AACxBT,MAAAA,eAAe,CAACU,gBAAhB,CAAiCD,GAAjC;AACD,K;;UAEDE,U,GAAa;AAAA,aAAM,MAAKC,QAAL,CAAc;AAAET,QAAAA,OAAO,EAAE,CAAC,MAAKD,KAAL,CAAWC;AAAvB,OAAd,CAAN;AAAA,K;;UAEbU,W,GAAc,UAAAC,MAAM,EAAI;AACtBd,MAAAA,eAAe,CAACe,aAAhB,CAA8BD,MAA9B;AACD,K;;UAEDE,W,GAAc,YAAM;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AACA,YAAKN,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAEJ,eAAe,CAACmB;AAAzB,OAAd;;AACAnB,MAAAA,eAAe,CAACoB,UAAhB,CAA2B,MAAKb,KAAL,CAAWc,cAAX,CAA0BC,QAArD;AACD,K;;;;;;;WA9BD,6BAAoB;AAClBtB,MAAAA,eAAe,CAACuB,WAAhB,CAA4B,KAAKlB,cAAjC;AAED;;;WAED,4BAAmBmB,SAAnB,EAA8B;AAC5B,UAAIA,SAAS,CAACH,cAAV,KAA6B,KAAKd,KAAL,CAAWc,cAA5C,EAA4D;AAC1D,aAAKR,WAAL,CAAiB,KAAKN,KAAL,CAAWc,cAAX,CAA0BC,QAA3C;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;AACF;;;WAsBD,kBAAS;AACP,aAAO,KAAKhB,KAAL,CAAWC,OAAX,GACL,oBAAC,YAAD,eACM,KAAKI,KADX;AAEE,QAAA,UAAU,EAAE,KAAKL,KAAL,CAAWE,KAFzB;AAGE,QAAA,WAAW,EAAE,KAAKY,WAHpB;AAIE,QAAA,UAAU,EAAE,KAAKL,UAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADK,GAQL,oBAAC,qBAAD;AACE,QAAA,WAAW,EAAE,KAAKH,gBADpB;AAEE,QAAA,UAAU,EAAE,KAAKN,KAAL,CAAWE,KAFzB;AAGE,QAAA,WAAW,EAAE,KAAKY,WAHpB;AAIE,QAAA,UAAU,EAAE,KAAKL,UAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF;AAeD;;;;EAtDiClB,S;;AAyDpC,IAAMgC,eAAe,GAAG,SAAlBA,eAAkB,CAAAvB,KAAK;AAAA,SAAK;AAChCmB,IAAAA,cAAc,EAAEnB,KAAK,CAACmB;AADU,GAAL;AAAA,CAA7B;;AAIA,eAAe3B,OAAO,CAAC+B,eAAD,EAAkB;AAAE3B,EAAAA,iBAAiB,EAAjBA;AAAF,CAAlB,CAAP,CACbG,qBADa,CAAf;AAIA,IAAMyB,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf","sourcesContent":["import React, { Component } from \"react\"\nimport { StyleSheet } from \"react-native\"\nimport { connect } from \"react-redux\"\nimport FloatMusicDetailsView from \"./FloatMusicDetailsView\"\nimport MusicPlayerAsync from \"../components/MusicPlayerAsync\"\nimport MusicPlayBar from \"../components/MusicPlayBar\"\nimport { updateMusicStatus } from \"../redux/actions\"\nimport * as Font from \"expo-font\"\nconst PureMusicPlayer = new MusicPlayerAsync()\n\nclass StickyMusicPlayerView extends Component {\n  state = {\n    showBar: true,\n    pause: true\n  }\n\n  componentDidMount() {\n    PureMusicPlayer.setPlayback(this.setMusicStatus)\n    \n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selected_music !== this.props.selected_music) {\n      this.reloadMusic(this.props.selected_music.audioUrl)\n      console.log(\"Music changed\")\n    }\n  }\n\n  setMusicStatus = status => {\n    this.props.updateMusicStatus(status)\n  }\n\n  setMusicPosition = pos => {\n    PureMusicPlayer.setMusicPosAsync(pos)\n  }\n\n  changeView = () => this.setState({ showBar: !this.state.showBar })\n\n  reloadMusic = source => {\n    PureMusicPlayer.reloadAndPlay(source)\n  }\n\n  toggleMusic = () => {\n    console.log(\"Pressed Play\")\n    this.setState({ pause: PureMusicPlayer.isPlaying })\n    PureMusicPlayer.togglePlay(this.props.selected_music.audioUrl)\n  }\n\n  render() {\n    return this.state.showBar ? (\n      <MusicPlayBar\n        {...this.props}\n        pauseState={this.state.pause}\n        toggleMusic={this.toggleMusic}\n        changeView={this.changeView}\n      />\n    ) : (\n      <FloatMusicDetailsView\n        setPosition={this.setMusicPosition}\n        pauseState={this.state.pause}\n        toggleMusic={this.toggleMusic}\n        changeView={this.changeView}\n      />\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  selected_music: state.selected_music\n})\n\nexport default connect(mapStateToProps, { updateMusicStatus })(\n  StickyMusicPlayerView\n)\n\nconst styles = StyleSheet.create({})\n"]},"metadata":{},"sourceType":"module"}