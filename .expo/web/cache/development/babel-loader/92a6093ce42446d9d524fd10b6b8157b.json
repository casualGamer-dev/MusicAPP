{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport { Audio } from \"expo-av\";\n\nvar MusicPlayerAsync = function MusicPlayerAsync() {\n  var _this = this;\n\n  _classCallCheck(this, MusicPlayerAsync);\n\n  this.setPlayback = function (func) {\n    _this.playbackFunc = func;\n  };\n\n  this.setMusicPosAsync = function _callee(pos) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(_this.pauseMusic());\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(_this.soundObject.setPositionAsync(pos));\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(_this.playMusic());\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  this.getSoundObjAsync = function _callee2(token, source) {\n    var tempSoundObj;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            tempSoundObj = new Audio.Sound();\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(tempSoundObj.loadAsync({\n              uri: source\n            }, downloadFirst = true));\n\n          case 3:\n            return _context2.abrupt(\"return\", [token, tempSoundObj]);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  this.loadMusic = function _callee3(source) {\n    var _await$_this$getSound, _await$_this$getSound2, returned_token, tempSoundObj;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(_this.source !== source)) {\n              _context3.next = 20;\n              break;\n            }\n\n            _this.source = source;\n            _this.token += 1;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(_this.getSoundObjAsync(_this.token, source));\n\n          case 5:\n            _await$_this$getSound = _context3.sent;\n            _await$_this$getSound2 = _slicedToArray(_await$_this$getSound, 2);\n            returned_token = _await$_this$getSound2[0];\n            tempSoundObj = _await$_this$getSound2[1];\n\n            if (!(_this.token === returned_token)) {\n              _context3.next = 19;\n              break;\n            }\n\n            _this.soundObject = tempSoundObj;\n            _context3.next = 13;\n            return _regeneratorRuntime.awrap(_this.soundObject.setIsLoopingAsync(true));\n\n          case 13:\n            _context3.next = 15;\n            return _regeneratorRuntime.awrap(_this.soundObject.setProgressUpdateIntervalAsync(1));\n\n          case 15:\n            _this.playbackFunc && _this.soundObject.setOnPlaybackStatusUpdate(function (status) {\n              return _this.playbackFunc(status);\n            });\n            return _context3.abrupt(\"return\", true);\n\n          case 19:\n            return _context3.abrupt(\"return\", false);\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  this.unloadMusic = function _callee4() {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(_this.soundObject.unloadAsync());\n\n          case 3:\n            _this.musicLoaded = false;\n            _context4.next = 8;\n            break;\n\n          case 6:\n            _context4.prev = 6;\n            _context4.t0 = _context4[\"catch\"](0);\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  this.playMusic = function _callee5() {\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(_this.soundObject.playAsync());\n\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  this.pauseMusic = function _callee6() {\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(_this.soundObject.pauseAsync());\n\n          case 2:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  this.reloadAndPlay = function _callee7(source) {\n    var OK;\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return _regeneratorRuntime.awrap(_this.unloadMusic());\n\n          case 2:\n            if (!_this.isPlaying) {\n              _context7.next = 10;\n              break;\n            }\n\n            _context7.next = 5;\n            return _regeneratorRuntime.awrap(_this.loadMusic(source));\n\n          case 5:\n            OK = _context7.sent;\n\n            if (!OK) {\n              _context7.next = 10;\n              break;\n            }\n\n            _context7.next = 9;\n            return _regeneratorRuntime.awrap(_this.playMusic());\n\n          case 9:\n            _this.musicLoaded = true;\n\n          case 10:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  this.togglePlay = function _callee8(source) {\n    return _regeneratorRuntime.async(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n\n            if (_this.musicLoaded) {\n              _context8.next = 5;\n              break;\n            }\n\n            _context8.next = 4;\n            return _regeneratorRuntime.awrap(_this.loadMusic(source));\n\n          case 4:\n            _this.musicLoaded = true;\n\n          case 5:\n            if (!_this.isPlaying) {\n              _context8.next = 10;\n              break;\n            }\n\n            _context8.next = 8;\n            return _regeneratorRuntime.awrap(_this.pauseMusic());\n\n          case 8:\n            _context8.next = 12;\n            break;\n\n          case 10:\n            _context8.next = 12;\n            return _regeneratorRuntime.awrap(_this.playMusic());\n\n          case 12:\n            _context8.next = 18;\n            break;\n\n          case 14:\n            _context8.prev = 14;\n            _context8.t0 = _context8[\"catch\"](0);\n            console.log(\"MusicPlayer : There is an error in toggle!\");\n            console.log(\"Sound is not loaded\");\n\n          case 18:\n            _this.isPlaying = !_this.isPlaying;\n\n          case 19:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, [[0, 14]], Promise);\n  };\n\n  this.isPlaying = false;\n  this.isLoading = false;\n  this.musicLoaded = false;\n  this.soundObject = new Audio.Sound();\n  this.source = this.token = 0;\n  this.first_toggle = true;\n};\n\nexport { MusicPlayerAsync as default };","map":{"version":3,"sources":["C:/Users/WELCOME/Desktop/MusicAPP/src/components/MusicPlayerAsync.js"],"names":["Audio","MusicPlayerAsync","setPlayback","func","playbackFunc","setMusicPosAsync","pos","pauseMusic","soundObject","setPositionAsync","playMusic","getSoundObjAsync","token","source","tempSoundObj","Sound","loadAsync","uri","downloadFirst","loadMusic","returned_token","setIsLoopingAsync","setProgressUpdateIntervalAsync","setOnPlaybackStatusUpdate","status","unloadMusic","unloadAsync","musicLoaded","playAsync","pauseAsync","reloadAndPlay","isPlaying","OK","togglePlay","console","log","isLoading","first_toggle"],"mappings":"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","sourcesContent":["import { Audio } from \"expo-av\"\n\nexport default class MusicPlayerAsync {\n  constructor() {\n    this.isPlaying = false\n    this.isLoading = false\n    this.musicLoaded = false\n    this.soundObject = new Audio.Sound()\n    this.source = \n    this.token = 0\n    this.first_toggle = true\n  }\n\n  setPlayback = func => {\n    this.playbackFunc = func\n  }\n\n  setMusicPosAsync = async pos => {\n    await this.pauseMusic()\n    await this.soundObject.setPositionAsync(pos)\n    await this.playMusic()\n  }\n\n  getSoundObjAsync = async (token, source) => {\n    const tempSoundObj = new Audio.Sound()\n    await tempSoundObj.loadAsync({ uri: source }, (downloadFirst = true))\n    return [token, tempSoundObj]\n  }\n\n  loadMusic = async source => {\n    // console.log(\"Loading a music\")\n    if (this.source !== source) {\n      this.source = source\n      this.token += 1\n      const [returned_token, tempSoundObj] = await this.getSoundObjAsync(\n        this.token,\n        source\n      )\n      // console.log(\"\\nReturned_token: \")\n      // console.log(returned_token)\n      if (this.token === returned_token) {\n        this.soundObject = tempSoundObj\n        await this.soundObject.setIsLoopingAsync(true)\n        await this.soundObject.setProgressUpdateIntervalAsync(1)\n        this.playbackFunc &&\n          this.soundObject.setOnPlaybackStatusUpdate(status =>\n            this.playbackFunc(status)\n          )\n\n        return true\n      } else {\n        return false\n      }\n    }\n  }\n\n  // Object {\n  //   \"androidImplementation\": \"SimpleExoPlayer\",\n  //   \"didJustFinish\": false,\n  //   \"durationMillis\": 222458,\n  //   \"isBuffering\": false,\n  //   \"isLoaded\": true,\n  //   \"isLooping\": false,\n  //   \"isMuted\": false,\n  //   \"isPlaying\": false,\n  //   \"playableDurationMillis\": 61648,\n  //   \"positionMillis\": 2134,\n  //   \"progressUpdateIntervalMillis\": 500,\n  //   \"rate\": 1,\n  //   \"shouldCorrectPitch\": false,\n  //   \"shouldPlay\": false,\n  //   \"uri\": \"/uc\",\n  //   \"volume\": 1,\n  // }\n\n  unloadMusic = async () => {\n    try {\n      await this.soundObject.unloadAsync()\n      this.musicLoaded = false\n    } catch (error) {}\n  }\n\n  playMusic = async () => {\n    await this.soundObject.playAsync()\n  }\n\n  pauseMusic = async () => {\n    await this.soundObject.pauseAsync()\n  }\n\n  reloadAndPlay = async source => {\n    // console.log(\"Reloading\")\n    await this.unloadMusic()\n\n    if (this.isPlaying) {\n      const OK = await this.loadMusic(source)\n      if (OK) {\n        await this.playMusic()\n        this.musicLoaded = true\n      }\n    }\n    // console.log(\"Reloading finished\")\n  }\n\n  togglePlay = async source => {\n    try {\n      if (!this.musicLoaded) {\n        await this.loadMusic(source)\n        this.musicLoaded = true\n      }\n      if (this.isPlaying) {\n        await this.pauseMusic()\n      } else {\n        await this.playMusic()\n      }\n    } catch (error) {\n      console.log(\"MusicPlayer : There is an error in toggle!\")\n      console.log(\"Sound is not loaded\")\n    }\n    this.isPlaying = !this.isPlaying\n  }\n}"]},"metadata":{},"sourceType":"module"}